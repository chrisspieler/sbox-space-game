@using System.Linq;
@using System.Collections.Generic;
@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root class="column">
    <div id="mainPanel">
        <div id="leftPanel" class="column">
            <div id="maintenancePanel" class="column">
                <div class="column button" onmousedown=@(() => _holdingRefuel = true ) onmouseup=@(() => _holdingRefuel = false)>
                    <FillBar Icon="local_gas_station" FillColor=@Color.Yellow FillPercentGetter=@GetFuelPercent/>
                    <p>HOLD TO REFUEL</p>
                    <p class="price">@GetFuelPricePerUnit() CR / UNIT (@GetFuelTopOffPrice() CR TO FILL)</p>
                </div>
                <div id="repairButton" class="button column" onclick=@RepairShip>
                    <div class="center-content">
                        <div class="icon">security</div>
                        <p>REPAIR HULL</p>
                    </div>
                    <p class="price">@GetRepairPrice() CR</p>
                </div>
            </div>
            <div id="sellPanel" class="column">
                <div id="sellTitle" class="center-content header">SELL MINERALS</div>
                @foreach( var item in GetShipCargo())
                {
                    <div class="cargo">
                        <Image Texture=@item.InventoryIcon/>
                        <h3 class="name center-content">@item.Name</h3>
                        <p class="price">@item.Value CR</p>
                        <div id="sellButton" class="button" onclick=@(() => SellCargo( item ) )>SELL</div>
                    </div>
                }
                <!--TODO: List every saleable item in the ship's cargo hold.-->
            </div>
        </div>
        <div id="buyPanel" class="column">
            <div id="buyTitle" class="center-content header">BUY EQUIPMENT</div>
            @foreach( var upgrade in _availableUpgrades)
            {
                <div class="upgrade">
                    <Image Texture=@upgrade.Thumbnail/>
                    <div id="infoColumn" class="column center-content">
                        <h3 class="name center-content">@upgrade.Name</h3>
                        <p class="description">@upgrade.FunctionText</p>
                        <p class="flavor">@upgrade.FlavorText</p>
                    </div>
                    <div id="buyColumn" class="column center-content">
                        <h2 class="price">@upgrade.Cost CR</h2>
                        <div id="buyButton" class="button center-content" onclick=@(() => BuyUpgrade( upgrade ))>BUY</div>
                    </div>
                </div>
            }
            <!--TODO: List all of the cool things you can buy.-->
        </div>
    </div>
    <div id="bottomBar">
        <p id="creditsDisplay">@(Career.Active.Money) CREDITS</p>
        <div id="exitButton" class="button" @onclick=@Exit>EXIT</div>
    </div>
</root>

@code
{

    /// <summary>
    /// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine( GetFuelPercent(), GetRepairPrice(), Career.Active.Money, GetShipCargo() );

    [Property] public Shop Shop { get; set; }
    [Property] public ShipController Ship { get; set; }

    private bool _holdingRefuel;
    private List<Upgrade> _availableUpgrades;

    protected override void OnEnabled()
    {
        base.OnEnabled();

        Ship = ShipController.GetCurrent();
        FetchAvailableUpgrades();
    }

    protected override void OnUpdate()
    {
        if ( Input.EscapePressed)
        {
            Exit();
            return;
        }

        if ( _holdingRefuel )
        {
            TickRefuel();
        }
    }

    private void Exit()
    {
        _holdingRefuel = false;
        Enabled = false;
        Shop.EjectPlayer();
    }

    private IEnumerable<CargoItem> GetShipCargo()
    {
        if (!Ship.IsValid() || !Ship.Cargo.IsValid())
            return Enumerable.Empty<CargoItem>();

        return Ship.Cargo.Items;
    }

    private void SellCargo( CargoItem item )
    {
        Shop.SellItem(item, Ship);
    }

    private float GetFuelPercent()
    {
        if (!Ship.IsValid() || !Ship.Fuel.IsValid())
            return 0f;

        return Ship.Fuel.CurrentAmount / Ship.Fuel.MaxCapacity * 100f;
    }

    private int GetFuelPricePerUnit()
    {
        return (int)Shop.FuelCostPerUnit;
    }

    private int GetFuelTopOffPrice()
    {
        if (!Ship.IsValid() || !Ship.Fuel.IsValid())
            return 0;

        var topOffAmount = Ship.Fuel.MaxCapacity - Ship.Fuel.CurrentAmount;
        return (int)(Shop.FuelCostPerUnit * topOffAmount);
    }

    private void TickRefuel()
    {
        Shop.TickRefuel( Ship );
    }

    private int GetRepairPrice()
    {
        return Shop.GetRepairPrice( Ship );
    }

    private void RepairShip()
    {
        Shop.Repair( Ship );
    }

    private void FetchAvailableUpgrades()
    {
        _availableUpgrades = Career.Active.GetAvailableUpgrades().ToList();
        StateHasChanged();
    }

    private void BuyUpgrade( Upgrade upgrade)
    {
        Shop.BuyUpgrade(Ship, upgrade);
        FetchAvailableUpgrades();
        StateHasChanged();
    }
}
